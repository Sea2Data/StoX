package HierarchicalData;

import BioticTypes.v1_4.MissionType;
import BioticTypes.v1_4.MissionsType;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
import javax.xml.bind.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Edvin Fuglebakk edvin.fuglebakk@imr.no
 */
public class IO {

    /**
     * parses Hierarchical data from xml
     *
     * @param <T> type generated by the jaxb framework for the data to be
     * parsed. Typically the data targetClass corresponding to the top level
     * element in xml.
     * @param stream stream from which data will be parsed.
     * @param targetClass The class corresponding to the type T
     * @return
     * @throws JAXBException
     */
    public static <T extends HierarchicalData> T parse(InputStream stream, Class<T> targetClass) throws JAXBException, XMLStreamException {
        XMLInputFactory xmlif = XMLInputFactory.newInstance();
        XMLEventReader xmler = xmlif.createXMLEventReader(stream);

        JAXBContext jc = JAXBContext.newInstance(targetClass);

        Unmarshaller unmarshaller = jc.createUnmarshaller();
        T toplevel = targetClass.cast(wrap(unmarshaller.unmarshal(xmler)));
        return toplevel;
    }

    /**
     * parses Hierarchical data from xml, while applying the given xml filter.
     *
     * @param <T>
     * @param stream
     * @param targetClass
     * @param filter
     * @return
     * @throws JAXBException
     * @throws XMLStreamException
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws IOException
     */
    public static <T extends HierarchicalData> T parse(InputStream stream, Class<T> targetClass, XMLFilter filter) throws JAXBException, XMLStreamException, ParserConfigurationException, SAXException, IOException {

        // Set the parent XMLReader on the XMLFilter
        SAXParserFactory spf = SAXParserFactory.newInstance();
        spf.setNamespaceAware(true);
        SAXParser sp = spf.newSAXParser();
        XMLReader xr = sp.getXMLReader();
        filter.setParent(xr);

        JAXBContext jc = JAXBContext.newInstance(targetClass);

        // Set UnmarshallerHandler as ContentHandler on XMLFilter
        Unmarshaller unmarshaller = jc.createUnmarshaller();
        UnmarshallerHandler unmarshallerHandler = unmarshaller
                .getUnmarshallerHandler();
        filter.setContentHandler(unmarshallerHandler);

        InputSource xml = new InputSource(stream);
        filter.parse(xml);
        return targetClass.cast(wrap(unmarshallerHandler.getResult()));

    }

    private static Object wrap(Object result) {
        if (result instanceof BioticTypes.v1_4.MissionType) {
            // Add Missions to 1_4 xml file with top node mission
            return new BioticTypes.v1_4.MissionsType() {
                @Override
                public List<BioticTypes.v1_4.MissionType> getMission() {
                    return Arrays.asList((BioticTypes.v1_4.MissionType) result);
                }
            };
        } else if (result instanceof BioticTypes.v3.MissionType) {
            // Add Missions to 1_4 xml file with top node mission
            return new BioticTypes.v3.MissionsType() {
                @Override
                public List<BioticTypes.v3.MissionType> getMission() {
                    return Arrays.asList((BioticTypes.v3.MissionType) result);
                }
            };
        }

        return result;
    }

    /**
     * Saves Hierarchical data to xml
     *
     * @param <T> Type mapped to xml by jaxb framework
     * @param stream stream to which xml will be written
     * @param data the data to write.
     * @throws JAXBException
     */
    public static <T extends HierarchicalData> void save(OutputStream stream, T data) throws JAXBException {
        JAXBContext jc = JAXBContext.newInstance(data.getClass());
        Marshaller m = jc.createMarshaller();
        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        m.marshal(data, stream);
    }

}
