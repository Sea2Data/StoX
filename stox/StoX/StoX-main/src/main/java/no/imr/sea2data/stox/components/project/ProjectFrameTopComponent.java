package no.imr.sea2data.stox.components.project;

import java.util.Collection;
import no.imr.stox.api.IProjectProvider;
import no.imr.stox.model.IProject;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//no.imr.sea2data.stox.components.project//ProjectFrame//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ProjectFrameTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true, position = 1)
@ActionID(category = "Window", id = "no.imr.sea2data.stox.components.project.ProjectFrameTopComponent")
@ActionReference(path = "Menu/Window")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProjectFrameAction",
        preferredID = "ProjectFrameTopComponent")
public final class ProjectFrameTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final ExplorerManager explorerManager = new ExplorerManager();

    /**
     * Initialize.
     */
    public ProjectFrameTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ProjectFrameTopComponent.class, "CTL_ProjectFrameTopComponent"));
        setToolTipText(NbBundle.getMessage(ProjectFrameTopComponent.class, "HINT_ProjectFrameTopComponent"));
        Lookup l = ExplorerUtils.createLookup(explorerManager, getActionMap());
        associateLookup(l);
        // Invoke when ui is ready:
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {
            @Override
            public void run() {
                requestActive();
                IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
                provider.loadConfig();
                provider.checkSystem(WindowManager.getDefault().getMainWindow(), false);
                if (provider.getProject() != null) {
                    updateProjectNode();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new BeanTreeView();

        setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private Lookup.Result<IProject> result = null;

    @Override
    public void componentOpened() {
        IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
        result = provider.getProjectLookup().lookupResult(IProject.class);
        result.addLookupListener(this);
        // In the start request the main TC active.
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends IProject> c = result.allInstances();
        if (!c.isEmpty()) {
            updateProjectNode();
        }
    }

    /**
     * Required top component method.
     *
     * @param p Property object.
     */
    public void writeProperties(final java.util.Properties properties) {
    }

    /**
     * Required top component method.
     *
     * @param p Property object.
     */
    public void readProperties(final java.util.Properties properties) {
    }


    /**
     * Refreshes all properties.
     */
    public void refreshProperties() {
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    private void updateProjectNode() {
        IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
        AbstractNode node = new ProjectNode(provider);
        explorerManager.setRootContext(node);
        ((BeanTreeView) scrollPane).expandAll();
    }

}
