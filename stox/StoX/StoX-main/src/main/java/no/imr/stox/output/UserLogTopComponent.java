package no.imr.stox.output;

import java.io.File;
import java.io.IOException;
import java.util.List;
import no.imr.stox.model.IModel;
import no.imr.stox.model.IModelListenerService;
import no.imr.stox.model.ModelListenerAdapter;
import no.imr.stox.model.RModel;
import org.apache.commons.io.FileUtils;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//no.imr.stox.output//UserLog//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "UserLogTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "no.imr.stox.output.UserLogTopComponent")
@ActionReference(path = "Menu/Window")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_UserLogAction",
        preferredID = "UserLogTopComponent"
)
@Messages({
    "CTL_UserLogAction=User Log",
    "CTL_UserLogTopComponent=User Log",
    "HINT_UserLogTopComponent=This is a User Logging window"
})
public final class UserLogTopComponent extends TopComponent {

    public UserLogTopComponent() {
        initComponents();
        setName(Bundle.CTL_UserLogTopComponent());
        setToolTipText(Bundle.HINT_UserLogTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        IModelListenerService fls = (IModelListenerService) Lookup.getDefault().lookup(IModelListenerService.class);
        fls.getModelListeners().add(new ModelListenerAdapter() {

            @Override
            public void onProcessLog(IModel model, String msg) {
                UserLogTopComponent.this.onProcessLog(model, msg); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onReset(IModel m) {
                jTextArea1.setText("");
            }

            @Override
            public void onModelStop(IModel model) {
                
                try {
                    List<String> lines = FileUtils.readLines(new File(RModel.getTriggerOutFilename(model)));
                    lines.forEach(l -> appendMsg(l));
                } catch (IOException ex) {
                }
            }

            @Override
            public void onModelStart(IModel model) {
                appendMsg("\r\n------------------------------------------------------------------------\r\n" + "Running " + model.getModelName() + 
                        "\r\n------------------------------------------------------------------------\r\n\r\n") ;
            }

        });
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
    }

    public void appendMsg(String msg) {
        jTextArea1.append(msg + "\r\n");
    }

    public void onProcessLog(IModel model, String msg) {
        appendMsg(msg);
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
        /*if (msg.startsWith("Warning")) {
            JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
            this.toFront();
        }*/
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
    }
}
