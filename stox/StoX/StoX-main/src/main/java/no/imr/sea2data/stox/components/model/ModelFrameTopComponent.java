package no.imr.sea2data.stox.components.model;

import java.util.Collection;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.GrayFilter;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import no.imr.sea2data.stox.actions.ActionUI;
import no.imr.stox.api.IProjectProvider;
import no.imr.stox.api.IRunnable;
import no.imr.stox.exception.UserErrorException;
import no.imr.stox.model.IModel;
import no.imr.stox.model.IModelListenerService;
import no.imr.stox.model.IProcess;
import no.imr.stox.model.IProject;
import no.imr.stox.model.ModelListenerAdapter;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
public class ModelFrameTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final ExplorerManager em = new ExplorerManager();
    private final ModelChildFactory modelChildFactory;

    /**
     * Initialize.
     */
    public ModelFrameTopComponent(String modelName) {
        initComponents();
        //Set the layout so that we can easily add the OutlineView:

        //Create the OutlineView:
        ((BeanTreeView) jScrollPane1).setRootVisible(false);
        ((BeanTreeView) jScrollPane1).expandAll();
        JComponent anc = ((BeanTreeView) jScrollPane1);
        modelChildFactory = new ModelChildFactory(modelName, anc);
        ModelNode root = new ModelNode(modelChildFactory);
        //Hide the root node, since we only care about the children:
        em.setRootContext(root);
        //Put the Nodes into the Lookup of the TopComponent,
        //so that the Properties window will be synchronized:
        ActionMap map = getActionMap();
        /*map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(em)); // currently unused
         map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(em));
         map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(em));*/
        map.put("delete", ExplorerUtils.actionDelete(em, false));
        associateLookup(new ProxyLookup(ExplorerUtils.createLookup(em, map), Lookups.fixed(new RunnableImpl())));

        // Connect buttons to actions:
        applyActionToButton(modelChildFactory.getRunAction(), jRun);
        applyActionToButton(modelChildFactory.getRunFromHereAction(), jRunFromHere);
        applyActionToButton(modelChildFactory.getRunToHereAction(), jRunToHere);
        applyActionToButton(modelChildFactory.getRunNextAction(), jRunNext);
        applyActionToButton(modelChildFactory.getRunAction(), jRun);
        applyActionToButton(modelChildFactory.getResetAction(), jReset);
        applyActionToButton(modelChildFactory.getAddProcessAction(), jAddProcess);
        // Register Node as model listener. (Updating state on icon when run)
        IModelListenerService fls = (IModelListenerService) Lookup.getDefault().lookup(IModelListenerService.class);
        fls.getModelListeners().add(new ModelListenerAdapter() {
            @Override
            public void onRunningProcessChanged(IModel model, Integer runningProcess) {
                firePropChangeAtActions();
            }

            @Override
            public void onModelStart(IModel model) {
                firePropChangeAtActions();
            }

            @Override
            public void onModelStop(IModel model) {
                firePropChangeAtActions();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new ModelTreeView();
        jToolBar1 = new javax.swing.JToolBar();
        jRun = new javax.swing.JButton();
        jRunNext = new javax.swing.JButton();
        jRunFromHere = new javax.swing.JButton();
        jRunToHere = new javax.swing.JButton();
        jReset = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jAddProcess = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(236, 200));

        jToolBar1.setRollover(true);

        jRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/run16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jRun, org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRun.text")); // NOI18N
        jRun.setToolTipText(org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRun.toolTipText")); // NOI18N
        jRun.setFocusable(false);
        jRun.setHideActionText(true);
        jRun.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRun.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRun);

        jRunNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/runnext16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jRunNext, org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRunNext.text")); // NOI18N
        jRunNext.setToolTipText(org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRunNext.toolTipText")); // NOI18N
        jRunNext.setFocusable(false);
        jRunNext.setHideActionText(true);
        jRunNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRunNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRunNext);

        jRunFromHere.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/runfromhere16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jRunFromHere, org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRunFromHere.text")); // NOI18N
        jRunFromHere.setFocusable(false);
        jRunFromHere.setHideActionText(true);
        jRunFromHere.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRunFromHere.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRunFromHere);

        jRunToHere.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/runto16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jRunToHere, org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRunToHere.text")); // NOI18N
        jRunToHere.setToolTipText(org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jRunToHere.toolTipText")); // NOI18N
        jRunToHere.setFocusable(false);
        jRunToHere.setHideActionText(true);
        jRunToHere.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRunToHere.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jRunToHere);

        jReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jReset, org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jReset.text")); // NOI18N
        jReset.setToolTipText(org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jReset.toolTipText")); // NOI18N
        jReset.setFocusable(false);
        jReset.setHideActionText(true);
        jReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jReset.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jResetActionPerformed(evt);
            }
        });
        jToolBar1.add(jReset);
        jToolBar1.add(jSeparator1);

        jAddProcess.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/process.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jAddProcess, org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jAddProcess.text")); // NOI18N
        jAddProcess.setToolTipText(org.openide.util.NbBundle.getMessage(ModelFrameTopComponent.class, "ModelFrameTopComponent.jAddProcess.toolTipText")); // NOI18N
        jAddProcess.setFocusable(false);
        jAddProcess.setHideActionText(true);
        jAddProcess.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jAddProcess.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jAddProcess);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jResetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jResetActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddProcess;
    private javax.swing.JButton jReset;
    private javax.swing.JButton jRun;
    private javax.swing.JButton jRunFromHere;
    private javax.swing.JButton jRunNext;
    private javax.swing.JButton jRunToHere;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    private Lookup.Result<IProject> result = null;
    private Lookup.Result<IProcess> processResult = null;
    private Lookup.Result<IModel> modelResult = null;
    private final LookupListener processListener = new LookupListener() {
        @Override
        public void resultChanged(LookupEvent ev) {
            Collection<? extends IProcess> c = processResult.allInstances();
            if (!c.isEmpty() && c.size() == 1) {
                modelChildFactory.setActiveProcess(c.iterator().next());
            } else {
                modelChildFactory.setActiveProcess(null);
            }
            firePropChangeAtActions();
        }
    };

    private final LookupListener modelListener = new LookupListener() {
        @Override
        public void resultChanged(LookupEvent ev) {
            Collection<? extends IModel> c = modelResult.allInstances();
            firePropChangeAtActions();
        }
    };

    private void firePropChangeAtActions() {
        modelChildFactory.getRunAction().updateActionFromHandler();
        modelChildFactory.getRunFromHereAction().updateActionFromHandler();
        modelChildFactory.getRunToHereAction().updateActionFromHandler();
        modelChildFactory.getRunNextAction().updateActionFromHandler();
        modelChildFactory.getResetAction().updateActionFromHandler();
        modelChildFactory.getAddProcessAction().updateActionFromHandler();
    }

    @Override
    public void componentOpened() {
        IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
        result = provider.getProjectLookup().lookupResult(IProject.class);
        result.addLookupListener(this);
        processResult = getLookup().lookupResult(IProcess.class);
        processResult.addLookupListener(processListener);
        modelResult = getLookup().lookupResult(IModel.class);
        modelResult.addLookupListener(modelListener);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        processResult.removeLookupListener(processListener);
        modelResult.removeLookupListener(modelListener);
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends IProject> c = result.allInstances();
        if (!c.isEmpty()) {
            modelChildFactory.refresh();
            firePropChangeAtActions();
        }
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    private IModel getModel() {
        IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
        if (provider.getProject() != null) {
            return provider.getProject().getModel(modelChildFactory.getModelName());
        }
        return null;
    }

    private void applyActionToButton(ActionUI action, JButton btn) {
        btn.setAction(action);
        Icon icon = (Icon) action.getValue(Action.SMALL_ICON);
        if (icon != null)  {
            btn.setIcon(icon);
            btn.setDisabledIcon(new ImageIcon(GrayFilter.createDisabledImage(ImageUtilities.icon2Image(icon))));
        }
    }

    private class RunnableImpl implements IRunnable {

        public RunnableImpl() {
        }

        @Override
        public void run() {
            IModel m = getModel();
            IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
            if (m != null && provider != null) {
                try {
                    provider.runProject(m, null, null, true);
                } catch (UserErrorException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
    }
}
