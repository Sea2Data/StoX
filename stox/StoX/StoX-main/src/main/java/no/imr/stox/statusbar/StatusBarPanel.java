/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package no.imr.stox.statusbar;

import java.net.URL;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import no.imr.stox.model.IModel;

/**
 *
 * @author aasmunds
 */
public class StatusBarPanel extends javax.swing.JPanel {

    /**
     * Creates new form StatusBarPanel
     */
    ImageIcon waitIcon;

    public StatusBarPanel() {
        initComponents();
        URL path = this.getClass().getResource("/images/wait16.gif");
        waitIcon = new ImageIcon(path);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(label, org.openide.util.NbBundle.getMessage(StatusBarPanel.class, "StatusBarPanel.label.text")); // NOI18N
        add(label, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(imgLabel, org.openide.util.NbBundle.getMessage(StatusBarPanel.class, "StatusBarPanel.imgLabel.text_1")); // NOI18N
        imgLabel.setPreferredSize(new java.awt.Dimension(18, 18));
        add(imgLabel, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel label;
    // End of variables declaration//GEN-END:variables

    void doUpdateByModel(IModel rm) {
        // Update the project running state.
        String status = "";
        Icon ic = null;
        if (rm != null) {
            switch (rm.getRunState()) {
                case IModel.RUNSTATE_RUNNING:
                    status = "Running";
                    ic = waitIcon;
                    break;
                case IModel.RUNSTATE_STOPPED:
                    status = rm.isFinished() ? "Finished" : "Stopped";
            }
        } else {
            status = "Finished";
        }
        String s = rm != null ? " " + rm.getModelName() : "";
        String runState = status + s + "  ";
        label.setText(runState);
        imgLabel.setIcon(ic);
    }
}
