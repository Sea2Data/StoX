package no.imr.sea2data.stox.components.table;

import java.awt.BorderLayout;
import java.io.File;
import java.io.FileFilter;
import javax.swing.JPanel;
import no.imr.guibase.controls.ImagePanel;
import no.imr.sea2data.imrbase.util.Workspace;
import no.imr.stox.functions.utils.Functions;
import no.imr.stox.functions.utils.ProjectUtils;
import no.imr.stox.model.IModelListenerService;
import no.imr.stox.model.IProcess;
import no.imr.stox.model.ModelListenerAdapter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//no.imr.sea2data.stox.components.table//TableFrame//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "TableFrameTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true, position = 20)
@ActionID(category = "Window", id = "no.imr.sea2data.stox.components.table.TableFrameTopComponent")
@ActionReference(path = "Menu/Window")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TableFrameAction",
        preferredID = "TableFrameTopComponent")
public final class TableFrameTopComponent extends TopComponent {

    /**
     * Initialize.
     */
    public TableFrameTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TableFrameTopComponent.class, "CTL_TableFrameTopComponent"));
        setToolTipText(NbBundle.getMessage(TableFrameTopComponent.class, "HINT_TableFrameTopComponent"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jAbundance = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jBiomass = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jMeanWeight = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jAbundance.setColumns(20);
        jAbundance.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jAbundance.setRows(5);
        jScrollPane2.setViewportView(jAbundance);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TableFrameTopComponent.class, "TableFrameTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel2.setLayout(new java.awt.BorderLayout());

        jBiomass.setColumns(20);
        jBiomass.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jBiomass.setRows(5);
        jScrollPane3.setViewportView(jBiomass);

        jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TableFrameTopComponent.class, "TableFrameTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPanel3.setLayout(new java.awt.BorderLayout());

        jMeanWeight.setColumns(20);
        jMeanWeight.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jMeanWeight.setRows(5);
        jScrollPane4.setViewportView(jMeanWeight);

        jPanel3.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(TableFrameTopComponent.class, "TableFrameTopComponent.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea jAbundance;
    private javax.swing.JTextArea jBiomass;
    private javax.swing.JTextArea jMeanWeight;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        IModelListenerService fls = (IModelListenerService) Lookup.getDefault().lookup(IModelListenerService.class);
        fls.getModelListeners().add(new ModelListenerAdapter() {

            @Override
            public void onProcessEnd(IProcess process) {
                TableFrameTopComponent.this.onProcessEnd(process); //To change body of generated methods, choose Tools | Templates.
            }
        });

    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /**
     * Required top component method.
     *
     * @param p Property object.
     */
    void writeProperties(final java.util.Properties p) {
        /**
         * Do nothing
         */
    }

    /**
     * Required top component method.
     *
     * @param p Property object.
     */
    void readProperties(final java.util.Properties p) {
        /**
         * Do nothing
         */
    }

    public void onProcessEnd(IProcess process) {
        switch (process.getMetaFunction().getName()) {
            case Functions.FN_TOTALABUNDANCE:
                jAbundance.setText(process.getDataStorage().asTable(process.getOutput(), 1));
                break;
            case Functions.FN_ESTIMATEBYPOPULATIONCATEGORY:
                jAbundance.setText(process.getDataStorage().asTable(process.getOutput(), 1));
                jBiomass.setText(process.getDataStorage().asTable(process.getOutput(), 2));
                jMeanWeight.setText(process.getDataStorage().asTable(process.getOutput(), 3));
                break;
            case Functions.FN_GETPLOTS:
            case Functions.FN_GETREPORTS:
            case Functions.FN_PLOTABUNDANCE:
                String reportDir = Workspace.getDir(process.getModel().getProject().getProjectFolder(), ProjectUtils.PROJECT_OUTPUTR_REPORT);
                File f = new File(reportDir);
                File[] plotFiles = f.listFiles(new FileFilter() {

                    @Override
                    public boolean accept(File pathname) {
                        return pathname.isFile() && (pathname.getPath().endsWith("png"));
                    }
                });
                // Remove dynamic created tabs
                for (int tc = jTabbedPane1.getTabCount() - 1; tc >= 3; tc--) {
                    jTabbedPane1.removeTabAt(tc);
                }
                for (File pl : plotFiles) {
                    String plotName = pl.getName().replaceFirst("[.][^.]+$", "");
                    JPanel imagePanel = new JPanel();
                    ImagePanel imagePanel1 = new ImagePanel();
                    imagePanel.add(imagePanel1, BorderLayout.CENTER);
                    imagePanel1.setImage(pl.getPath());
                    jTabbedPane1.addTab(plotName, imagePanel1);
                }
        }
    }
}
