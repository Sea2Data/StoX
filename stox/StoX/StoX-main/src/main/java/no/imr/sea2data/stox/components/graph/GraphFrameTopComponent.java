package no.imr.sea2data.stox.components.graph;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import no.imr.sea2data.guibase.chart.IXYBarChart;
import no.imr.sea2data.guibase.chart.XYBarChart;
import no.imr.sea2data.imrbase.util.ImrSort;
import no.imr.stox.api.ILFQ;
import no.imr.stox.functions.utils.Functions;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//no.imr.sea2data.stox.components.graph//GraphFrame//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "GraphFrameTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "no.imr.sea2data.stox.components.graph.GraphFrameTopComponent")
@ActionReference(path = "Menu/Window")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GraphFrameAction",
        preferredID = "GraphFrameTopComponent")

public final class GraphFrameTopComponent extends TopComponent implements LookupListener/* implements IModelListener*/ {

    private final IXYBarChart chart;
//    private static final Color GRAPH_COLOR = new Color(211, 209, 241);
    private Lookup.Result<ILFQ> result;

    /**
     * Initialize.
     */
    public GraphFrameTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(GraphFrameTopComponent.class, "CTL_GraphFrameTopComponent"));
        setToolTipText(NbBundle.getMessage(GraphFrameTopComponent.class, "HINT_GraphFrameTopComponent"));
        chart = new XYBarChart();
        jLFQPanel.add(chart.getPanel());
        // Add chart properties:
        chart.setSeriesName("Number");
        chart.setXAxisLabel("Length (cm)");
        chart.setYAxisLabel("Value");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLFQPanel = new javax.swing.JPanel();

        setAttentionHighlight(false);
        setLayout(new java.awt.BorderLayout());

        jLFQPanel.setLayout(new java.awt.BorderLayout());
        add(jLFQPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jLFQPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(ILFQ.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    @Override
    public void resultChanged(LookupEvent evt) {
        Collection<ILFQ> c = ((Lookup.Result) evt.getSource()).allInstances();
        chart.clear();
        if (!c.isEmpty()) {
            ILFQ lfq = c.iterator().next();
            updateLFQ(lfq);
        }
        chart.repaint();
    }

    /**
     * Required top component method.
     *
     * @param p Property object.
     */
    void writeProperties(final java.util.Properties p) {
        /**
         * Do nothing
         */
    }

    /**
     * Required top component method.
     *
     * @param p Property object.
     */
    void readProperties(final java.util.Properties p) {
        /**
         * Do nothing
         */
    }

    private void updateLFQ(ILFQ lengthDist) {
        // For all Length groups.. combine relative assignment weight with length distribution
        List<String> keys = new ArrayList<>(lengthDist.getLFQ().keySet());
        Collections.sort(keys, new ImrSort.TranslativeComparator(true));
        double intv = lengthDist.getLengthInterval();
        chart.setTrend1("Length distribution: " + lengthDist.getLengthDistType());
        chart.setTrend2("Length interval: " + lengthDist.getLengthInterval() + " cm");
        // Update chart due to LFQ
        chart.setXAxisInterval(intv);
        double maxl = 0;
        for (String lengthGroup : keys) {
            Double weightedCount = lengthDist.getLFQ().get(lengthGroup);
            if(weightedCount == null || weightedCount == 0d) {
                continue;
            }
            double l = Double.valueOf(lengthGroup) + 0.5 * intv;
            maxl = Math.max(maxl, l);
            chart.setXY(l, weightedCount);
        }
        // snap upper to 50 interval units (to stabilize the axis during shifts)
        chart.updateXAxisRange(50);
        
        chart.setYAxisLabel(lengthDist.getLengthDistType().equals(Functions.LENGTHDISTTYPE_PERCENTLENGHTDIST) ? "%" :"N");
    }
}
