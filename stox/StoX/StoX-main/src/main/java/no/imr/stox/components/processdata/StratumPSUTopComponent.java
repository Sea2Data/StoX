package no.imr.stox.components.processdata;

import java.util.Arrays;
import java.util.Collection;
import no.imr.guibase.node.NodeProviderImplBase;
import no.imr.guibase.node.NodeUtil;
import no.imr.sea2data.stox.providers.LFQProvider;
import no.imr.sea2data.stox.providers.ProcessDataProvider;
import no.imr.stox.api.IProjectProvider;
import no.imr.stox.model.IProject;
import no.imr.stox.nodes.PSUNode;
import no.imr.stox.nodes.StrataNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//no.imr.stox.components.processdata//StratumPSU//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "StratumPSUTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "no.imr.stox.components.processdata.StratumPSUTopComponent")
@ActionReference(path = "Menu/Window")
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_StratumPSUAction",
        preferredID = "StratumPSUTopComponent"
)
@Messages({
    "CTL_StratumPSUAction=StratumPSU",
    "CTL_StratumPSUTopComponent=Stratum/PSU",
    "HINT_StratumPSUTopComponent=This is a Stratum/PSU window"
})
public final class StratumPSUTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private final ExplorerManager em = new ExplorerManager();

    public StratumPSUTopComponent() {
        initComponents();
        setName(Bundle.CTL_StratumPSUTopComponent());
        setToolTipText(Bundle.HINT_StratumPSUTopComponent());
        ((BeanTreeView) scrollPane).setRootVisible(false);
        ((BeanTreeView) scrollPane).expandAll();
        // Connect the process data root node with explorer manager and provide the lookup
        ProcessDataProvider pdp = (ProcessDataProvider) Lookup.getDefault().lookup(ProcessDataProvider.class);
        em.setRootContext(pdp.getRoot());
        LFQProvider lfp = (LFQProvider) Lookup.getDefault().lookup(LFQProvider.class);
        // make 2 lookups available on global selection tracker
        associateLookup(new ProxyLookup(
                ExplorerUtils.createLookup(em, getActionMap()),
                new AbstractLookup(lfp.createLfqSelection()),
                Lookups.fixed(new NodeSelectImpl())));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new BeanTreeView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    private Lookup.Result<Node> result = null;
    private Lookup.Result<IProject> prresult = null;

    private final LookupListener nodeListener = new LookupListener() {
        @Override
        public void resultChanged(LookupEvent le) {
            Collection<? extends Node> c = result.allInstances();
            if (!c.isEmpty()) {
                // Update explorer manager.
                // Restore the node structure and selection, if a new underlying object has been activated
                Node n = c.iterator().next();
                if (n instanceof PSUNode || n instanceof StrataNode) {
                    if (!Arrays.asList(em.getSelectedNodes()).contains(n)) {
                        NodeUtil.selectNode(em, n);
                    }
                }
            }
        }
    };
    private final LookupListener projectListener = new LookupListener() {
        @Override
        public void resultChanged(LookupEvent le) {
            // Refresh the strata nodes
            Collection<? extends IProject> c2 = prresult.allInstances();
            if (!c2.isEmpty()) {
                // Reset tree
                ProcessDataProvider pdp = Lookup.getDefault().lookup(ProcessDataProvider.class);
                if (pdp == null) {
                    return;
                }
                pdp.refreshStrataNodes();
            }
        }
    };

    @Override
    public void componentOpened() {
        // Listen to the object provider lookup for selection of object
        result = Utilities.actionsGlobalContext().lookupResult(Node.class);
        result.addLookupListener(nodeListener);
        // Connect to project lookup
        IProjectProvider provider = (IProjectProvider) Lookup.getDefault().lookup(IProjectProvider.class);
        prresult = provider.getProjectLookup().lookup(new Lookup.Template(IProject.class));
        prresult.addLookupListener(projectListener);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(nodeListener);
        prresult.removeLookupListener(projectListener);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    @Override
    public void resultChanged(LookupEvent le) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private class NodeSelectImpl extends NodeProviderImplBase {

        /**
         * Select node by explorer manager
         *
         * @param node
         */
        @Override
        public void select(Node node) {
            NodeUtil.selectNode(em, node);
        }
    }
}
