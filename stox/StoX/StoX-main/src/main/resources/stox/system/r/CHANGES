# 1.3.2
Removed the following unused functions: getParameters(), removeAssignment(), saveRList(), envCall(), getParametersOfProcess(), getBaselineOutput(), rstox.runRProcessFile().

Changed the funciton getBaseline to return a list of possibly three elements, 'parameters', which are the input parameters of the baseline, 'output', which is the output data from the baseline, and 'processData', which are the process data used in the baseline, specified in the project.xml file (see ?getBaseline).

Added the function getVar() which checks for the existence of a variable in a data frame, and is used to garantee an error if a variable requested from the the Java library of StoX is missing, indicating a change of name.

Removed the need for calling loadEnv() to get the stored data from the environment of a StoX project. loadEnv() has been extended and is should be used at the beginning of all plotting and report functions.

Changed the name of the following functions to starting with a dot, in order to hide these very internal funcitons from the package INDEX: initiateBootstrap(), jBoolean(), jDouble(), jInt(), Rstox.init().

Added the funciton getBaselineParameters(), which reads the projec.xml file directly and gets all input parameter values of the baseline, speeding this action up from a couple of seconds to less than 1/10 of a second.

Removed the functions Rstox.demo(), testModel(), and testModel_SweptArea(), which will be replaced by a tutorial in a later version. In the meanwhile, see examples of each funciton.

Changed the function imputeByAge() and the dependent function distributeAbundance() to store the indices at which age data are missing, and at which these data are extracted by random sampling of data at the same station, strata, and survey, in that prioritised order. The new method is about 5 times faster.

Added the list bootstrapParameters to the output of bootstrapParallel(), saving the seeds and other parameters. Similarly, the list imputParameters is added to the output from imputeByAge(). 

Added the functions getNMDinfo(), getNMDdata(), and the dependent function downloadXML(), used for downloading information and data from the API of the NMD (Norwegian Marine Data center). These functions are not completely finished, and some errors should be expected.

Added a warning in getProcessDataTableAsDataFrame() if no data are found.

Fixed a bug with encoding in xml-files encoded with UTF-8 on Windows, specifically with the nordic characters æ, ø, å. Added the line rapply(x, function(xx) iconv(xx, "UTF-8", "UTF-8"), how="replace") in downloadXML() to assure UTF-8 encoding.

Added the function as.matrix_full() for use when downloading NMD info or data.

Fixed bug in getBaselineOutput(), where projectName was used instead of baseline in the line processNames <- names(runBaseline(baseline, info=TRUE)). 

Small change in bootstrapParallel(), where base.AbByLength and base.AbByInd are now generated prior to invoking cores. Also changed the output from initiateBootstrap() to being the baseline object. 

Changed openProject() to not open a project that does not exist (previously the function mistakedly created the project skeleton if missing).

Added the missing iteration names to the output bootstrapVariable$AbByInd from imputeByAge().

Fixed bug in imputeByAge() and plotAbundance(), which were looking for the object 'runBootstrap_SweptArea', whereas the correct name is bootstrap_SweptArea.

# 1.3.3
Changed output from the baseline and project.xml to be properly formatted as data frames with numeric and logical type whereever this is possible. Perviously missing values were given as the character "-" (now NA) and logical values as the strings "true" and "false" (nor TRUE and FALSE). This resulted in somewhat faster imputeByAge().

Added the functions getPlots() and getReports(), which can generate all available plots and reports in one call. The functions passes arguments on to the underlying plotting/report functions (all functions with name starting with plot/report).

Added the variables 'level' (level of processing, currntly one of "boostrap" and "impute"), 'var' (the variable to return/plot, currently "abundance" and "weight"), and 'unit' (the unit of the variable, such as "tonnes", and "thousands", or the abbreviations "t", and "1000", see getPlottingUnit() for valid values), along with the variable 'type' (one of "acoustic" and "sweptarea").

Changed loadEnv() to check for already loaded data before loading the data. This functions should called first in all plotting and report functions. Added the function .load_Rstox() used in loadEnv() to load data with old formatting ("-" for NA and "true" for TRUE).

Changed and simplified plotAbundance().

Added the functions getReportVarName() and abbrMatch(), generating the report variable name used by plotting and reporting functions, and matches a string by abbreviation using the method of "$". Rstox now saves plots and reports using the same naming convension, which is level_var_otherparameters, where otherparameters are grp1 and grp2 in the getPlots() and getReports(), which both use the function reportAbundance().

The function polyArea() was changed to take holes in the polygon definitions into account.

# 1.4
Removed the following unused functions: getParameters(), removeAssignment(), saveRList(), envCall(), getParametersOfProcess(), getBaselineOutput(), rstox.runRProcessFile(), Rstox.demo(), testModel(), and testModel_SweptArea().

Changed the funciton getBaseline to return a list of possibly three elements, 'parameters', which are the input parameters of the baseline, 'output', which is the output data from the baseline, and 'processData', which are the process data used in the baseline, specified in the project.xml file (see ?getBaseline).

Removed the need for calling loadEnv() to get the stored data from the environment of a StoX project. loadEnv() has been extended and is should be used at the beginning of all plotting and report functions.

Added the funciton getBaselineParameters(), which reads the projec.xml file directly and gets all input parameter values of the baseline, speeding this action up from a couple of seconds to less than 1/10 of a second.

Changed the function imputeByAge() and the dependent function distributeAbundance() to store the indices at which age data are missing, and at which these data are extracted by random sampling of data at the same station, strata, and survey, in that prioritised order. The new method is about 5 times faster.

Added the list bootstrapParameters to the output of bootstrapParallel(), saving the seeds and other parameters. Similarly, the list imputParameters is added to the output from imputeByAge(). 

Added the functions getNMDinfo(), getNMDdata(), and the dependent function downloadXML(), used for downloading information and data from the API of the NMD (Norwegian Marine Data center). These functions are not completely finished, and some errors should be expected.

Changed output from the baseline and project.xml to be properly formatted as data frames with numeric and logical type whereever this is possible. Perviously missing values were given as the character "-" (now NA) and logical values as the strings "true" and "false" (nor TRUE and FALSE). This resulted in somewhat faster imputeByAge().

Added the functions getPlots() and getReports(), which can generate all available plots and reports in one call. The functions passes arguments on to the underlying plotting/report functions (all functions with name starting with plot/report).

Added the variables 'level' (level of processing, currntly one of "boostrap" and "impute"), 'var' (the variable to return/plot, currently "abundance" and "weight"), and 'unit' (the unit of the variable, such as "tonnes", and "thousands", or the abbreviations "t", and "1000", see getPlottingUnit() for valid values), along with the variable 'type' (one of "acoustic" and "sweptarea").

Changed loadEnv() to check for already loaded data before loading the data. This functions should called first in all plotting and report functions. Added the function .load_Rstox() used in loadEnv() to load data with old formatting ("-" for NA and "true" for TRUE).

The function polyArea() was changed to take holes in the polygon definitions into account.

# 1.4.1
Changed createProject() to accept templates and sorted out getNMDdata() to create living StoX projects.

Added the function updateProject() for pointing to xml files that are new or changed in the project, and closeProject() for removing a project form memory.

Fixed bug with encoding occurring on Windows when rCurl was used for downloading files from NMD. The new downloadXML() uses download.file() in the 'base' package, which avoids the encoding issue by not interpreting the file encoding, but merely downloading it to the project.



# 1.4.2
New output folder structure, now placing RData files in output/r/data and plots and report files in output/r/report.

Added the lists originalParameters, currentParameters and lastParameters, enabling check for which processes in the baseline that need to be rerun when running runBaseline(). The parameter 'save' now implies saving the last used parameters as the current parameters. To save the project with the current parameters (which could differ from the original parameters), use saveProject().

Changed the structure of the RstoxEnv environment so that each project now has a list containing the original, current and last used baseline parameters, the project Java object, and the environment of output data from bootstrapping and imputing, whereas the parameters were not saved, and the output data were contained in a separate project environment in the global environment prior to this change.

Added the function updateProject(), used for creating links to the xml-files stored in the project directory. Here the limit of 20 files applies. Also added closeProject() for removing a project form memory.

Added the option 'reset' in runBaseline() which forces the baseline to be rerun between the given start and end processes (used in particularl in runBootstrap(), which reruns the baseline model after changing some baseline data in memory).

The function getBaseline() now accepts the parameters of runBaseline(), such as parlist and ..., which are used to modifying baseline parameters. This makes it unnecessary to run runBaseline() before getBaseline().

Changed modifyBaselineParameters() to setBaselineParameters().

Added the functions .getParlist(), readBaselineParameters(), getBaselineParameters() and modifyBaselineParameters().

Added the option 'serialno' in getNMDdata().

The function saveRImage() was replaced (but still acting as an alias for) the new function savePojectData(), which first moves all old files with identical names to those to be saved to output/r/data/trash, and then writes the files to output/r/data. The same procedure will be implemented in StoX when writing data to output/baseline/data.

Similarly, the funciton loadEnv() was replaced (but still acting as an alias for) the new function loadPojectData().

Added the functions setProjectData() and getProjectData() for setting and getting project data to/from the project envirinment.

Added the function moveToTrash() for moving existing files to the trash directory in the same folder.

Added the option 'msg' to runBaseline().

Changed .load_Rstox() to .loadToRstox().

Removed warnings when baseline processes do not have output data.

Removed the option 'projectRoot' in createProject, and replaced this by 'dir'.

Changed setAssignments() and setMeanNASCValues() (changed to setNASC()) to accept projectName as input. Also reset the MeanNASC values to the original in bootstrapParallel() if cores == 1.



# 1.4.3
Added progress bar in runBootstrap() and imputeByAge() (also in parallel).

Fixed bug with bootstrapping where there are missing trawl stations in one or more strata. The bootstrapping now continues with a warning.


# 1.5 (2016-12-22, highlights)
Fixed the function getNMDdata() to download data and create StoX corking projects with a simple template as default. This enables downloading and reading biotic data in a simple manner by Rstox, achieved by a call to getNMDdata() and getBaseline().

New output folder structure, now placing RData files in output/r/data and plots and report files in output/r/report.

Added the lists originalParameters, currentParameters and lastParameters, enabling check for which processes in the baseline that need to be rerun when running runBaseline(). The parameter 'save' now implies saving the last used parameters as the current parameters. To save the project with the current parameters (which could differ from the original parameters), use saveProject().

Added progress bar in runBootstrap() and imputeByAge() (also in parallel).

Added the function updateProject() for pointing to xml files that are new or changed in the project, and closeProject() for removing a project form memory.

Added the option 'reset' in runBaseline() which forces the baseline to be rerun between the given start and end processes (used in particularl in runBootstrap(), which reruns the baseline model after changing some baseline data in memory).

The function getBaseline() now accepts the parameters of runBaseline(), such as parlist and ..., which are used to modifying baseline parameters. This makes it unnecessary to run runBaseline() before getBaseline().

Added the functions .getParlist(), readBaselineParameters(), getBaselineParameters() and modifyBaselineParameters().

Added the option 'serialno' in getNMDdata().

The function saveRImage() was replaced (but still acting as an alias for) the new function savePojectData(), which first moves all old files with identical names to those to be saved to output/r/data/trash, and then writes the files to output/r/data. The same procedure will be implemented in StoX when writing data to output/baseline/data.

Similarly, the funciton loadEnv() was replaced (but still acting as an alias for) the new function loadPojectData().

Added the functions setProjectData() and getProjectData() for setting and getting project data to/from the project envirinment.

Added the function moveToTrash() for moving existing files to the trash directory in the same folder.


# 1.5.2 (2017-01-27)
Added the function readXMLfiles() for reading XML-files (creating a temporary StoX project).

Rstox can now create and open projects located elsewhere than the default workspace, using the full path as the input projectName.

Added encoding="UTF-8" in getProcessDataTableAsDataFrame() and getDataFrameAtLevel() (used by getBaseline()) preventing misrepresented nordic characters (æ, ø, å).

Added the option 'tsn' in getNMDdata(), specifying a species by the tsn (species) code. Run g <- getNMDinfo("taxa") for a matrix of tsn codes and species names.

Changed treatment of 'acousticMethod' and 'bioticMethod' in runBootstrap(). The two existing methods are currently (a) one which bootstraps acoustic PSUs and trawl stations within stratum, and (b) one which only bootstraps trawl stations within stratum. Previously the trawl stations were denoted by "EDSU", but a more precice notation is "PSU", which also includes possible grouping of trawl stations into one PSU which should be included in the bootstrapping as a whole (not as single trawl stations). The preferred notation indicating the existing bootstrap methods is now PSU~Stratum, whereas EDSU~Stratum is still accepted, with a deprecation-warning.

Added the option 'simplify' in getNMDinfo(), which converts the data into matrices that are easier to access. Also added case insentitive support for the reference data type.

Added the function getProject() for use in saveProject() and openProject(). This function searches for the project Java object in R memory. Also added isProject() and reopenProject()

Removed the paramters startProcess and endProcess in bootstrapOneIteration() and bootstrapParallel().

Added the function getProjectPaths() to return all useful paths of a project. 

Added the function getRstoxEnv() using initiateRstoxEnv(), which should be used when retrieving data from the RstoxEnv environment or the environment of a project. When writing to the environment of a project, allways do temp <- getRstoxEnv() first to ensure that the RstoxEnv environment exists.

Updated baseline2eca(), which now returns the data 'biotic', 'landing', covariate matrices realted to these two, and various resource objects.


# 1.6 (2017-01-27)
Added the function readXMLfiles() for reading XML-files (creating a temporary StoX project).

Rstox can now create and open projects located elsewhere than the default workspace, using the full path as the input projectName.

Added encoding="UTF-8" in getProcessDataTableAsDataFrame() and getDataFrameAtLevel() (used by getBaseline()) preventing misrepresented nordic characters (æ, ø, å).

Added the option 'tsn' in getNMDdata(), specifying a species by the tsn (species) code. Run g <- getNMDinfo("taxa") for a matrix of tsn codes and species names.

Changed treatment of 'acousticMethod' and 'bioticMethod' in runBootstrap(). The two existing methods are currently (a) one which bootstraps acoustic PSUs and trawl stations within stratum, and (b) one which only bootstraps trawl stations within stratum. Previously the trawl stations were denoted by "EDSU", but a more precice notation is "PSU", which also includes possible grouping of trawl stations into one PSU which should be included in the bootstrapping as a whole (not as single trawl stations). The preferred notation indicating the existing bootstrap methods is now PSU~Stratum, whereas EDSU~Stratum is still accepted, with a deprecation-warning.

Added the option 'simplify' in getNMDinfo(), which converts the data into matrices that are easier to access. Also added case insentitive support for the reference data type.

Added the function getProject() for use in saveProject() and openProject(). This function searches for the project Java object in R memory. Also added isProject() and reopenProject()

Removed the paramters startProcess and endProcess in bootstrapOneIteration() and bootstrapParallel().

Added the function getProjectPaths() to return all useful paths of a project. 

Added the function getRstoxEnv() using initiateRstoxEnv(), which should be used when retrieving data from the RstoxEnv environment or the environment of a project. When writing to the environment of a project, allways do temp <- getRstoxEnv() first to ensure that the RstoxEnv environment exists.

Updated baseline2eca(), which now returns the data 'biotic', 'landing', covariate matrices realted to these two, and various reasource objects.


